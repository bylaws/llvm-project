REQUIRES: aarch64, x86
RUN: split-file %s %t.dir && cd %t.dir

RUN: llvm-mc -filetype=obj -triple=arm64ec-windows test.s -o test.obj
RUN: llvm-mc -filetype=obj -triple=x86_64-windows test.s -o test-x86_64.obj
RUN: llvm-mc -filetype=obj -triple=arm64ec-windows arm64ec-stubs.s -o arm64ec-stubs.obj
RUN: llvm-mc -filetype=obj -triple=arm64ec-windows arm64ec-stubs2.s -o arm64ec-stubs2.obj
RUN: llvm-mc -filetype=obj -triple=arm64ec-windows arm64ec-stubs3.s -o arm64ec-stubs3.obj
RUN: llvm-mc -filetype=obj -triple=arm64ec-windows %S/Inputs/loadconfig-arm64ec.s -o loadconfig-arm64ec.obj
RUN: llvm-lib -machine:arm64ec -def:test.def -out:test-arm64ec.lib
RUN: llvm-lib -machine:arm64ec -def:test2.def -out:test2-arm64ec.lib
RUN: llvm-lib -machine:x64 -def:test.def -out:test-x64.lib

RUN: lld-link -machine:arm64ec -dll -noentry -out:out.dll loadconfig-arm64ec.obj arm64ec-stubs.obj \
RUN:          test.obj test-arm64ec.lib test2-arm64ec.lib
RUN: lld-link -machine:arm64ec -dll -noentry -out:out2.dll loadconfig-arm64ec.obj arm64ec-stubs.obj \
RUN:          test.obj test-x64.lib test2-arm64ec.lib
RUN: lld-link -machine:arm64ec -dll -noentry -out:out3.dll loadconfig-arm64ec.obj arm64ec-stubs.obj \
RUN:          test-x86_64.obj test-x64.lib test2-arm64ec.lib
RUN: lld-link -machine:arm64ec -dll -noentry -out:out4.dll arm64ec-loadcfg.obj arm64ec-stubs2.obj \
RUN:          test.obj test-arm64ec.lib test2-arm64ec.lib
RUN: lld-link -machine:arm64ec -dll -noentry -out:out5.dll arm64ec-loadcfg.obj arm64ec-stubs3.obj \
RUN:          test.obj test-arm64ec.lib test2-arm64ec.lib

RUN: llvm-readobj --coff-imports out.dll | FileCheck -check-prefix=IMPORTS %s
RUN: llvm-readobj --coff-imports out2.dll | FileCheck -check-prefix=IMPORTS %s
RUN: llvm-readobj --coff-imports out3.dll | FileCheck -check-prefix=IMPORTS %s
IMPORTS:      Import {
IMPORTS-NEXT:   Name: test.dll
IMPORTS-NEXT:   ImportLookupTableRVA: 0x4230
IMPORTS-NEXT:   ImportAddressTableRVA: 0x3000
IMPORTS-NEXT:   Symbol: mydata (0)
IMPORTS-NEXT:   Symbol: myfunc (0)
IMPORTS-NEXT:   Symbol: otherfunc (0)
IMPORTS-NEXT: }
IMPORTS-NEXT: Import {
IMPORTS-NEXT:   Name: test2.dll
IMPORTS-NEXT:   ImportLookupTableRVA: 0x4250
IMPORTS-NEXT:   ImportAddressTableRVA: 0x3020
IMPORTS-NEXT:   Symbol: myfunc2 (0)
IMPORTS-NEXT: }

RUN: llvm-readobj --headers out.dll | FileCheck -check-prefix=HEADERS %s
RUN: llvm-readobj --headers out2.dll | FileCheck -check-prefix=HEADERS %s
RUN: llvm-readobj --headers out3.dll | FileCheck -check-prefix=HEADERS %s
HEADERS:  LoadConfigTableRVA: 0x4010
HEADERS:  IATRVA: 0x3000
HEADERS:  IATSize: 0x1000

RUN: llvm-objdump -d out.dll | FileCheck -check-prefix=DISASM %s
RUN: llvm-objdump -d out2.dll | FileCheck -check-prefix=DISASM %s
RUN: llvm-objdump -d out3.dll | FileCheck -check-prefix=DISASM %s
RUN: llvm-objdump -d out4.dll | FileCheck -check-prefix=DISASM %s
RUN: llvm-objdump -d out5.dll | FileCheck -check-prefix=DISASM %s
DISASM:      180001000: 52800040     mov     w0, #0x2                // =2
DISASM-NEXT: 180001004: d65f03c0     ret
DISASM-NEXT: 180001008: 90000030     adrp    x16, 0x180005000
DISASM-NEXT: 18000100c: f9400610     ldr     x16, [x16, #0x8]
DISASM-NEXT: 180001010: d61f0200     br      x16
DISASM-NEXT: 180001014: d000000b     adrp    x11, 0x180003000
DISASM-NEXT: 180001018: f940056b     ldr     x11, [x11, #0x8]
DISASM-NEXT: 18000101c: 9000000a     adrp    x10, 0x180001000 <.text>
DISASM-NEXT: 180001020: 9101414a     add     x10, x10, #0x50
DISASM-NEXT: 180001024: 17fffff7     b       0x180001000 <.text>
DISASM-NEXT: 180001028: d000000b     adrp    x11, 0x180003000
DISASM-NEXT: 18000102c: f940096b     ldr     x11, [x11, #0x10]
DISASM-NEXT: 180001030: f0ffffea     adrp    x10, 0x180000000
DISASM-NEXT: 180001034: 9100014a     add     x10, x10, #0x0
DISASM-NEXT: 180001038: 17fffff2     b       0x180001000 <.text>
DISASM-NEXT: 18000103c: d000000b     adrp    x11, 0x180003000
DISASM-NEXT: 180001040: f940116b     ldr     x11, [x11, #0x20]
DISASM-NEXT: 180001044: f0ffffea     adrp    x10, 0x180000000
DISASM-NEXT: 180001048: 9100014a     add     x10, x10, #0x0
DISASM-NEXT: 18000104c: 17ffffed     b       0x180001000 <.text>
DISASM-NEXT: 180001050: 52800060     mov     w0, #0x3                // =3
DISASM-NEXT: 180001054: d65f03c0     ret
DISASM-NEXT:                 ...
DISASM-NEXT: 180002000: ff 25 02 10 00 00            jmpq    *0x1002(%rip)           # 0x180003008

RUN: llvm-readobj --hex-dump=.test out.dll | FileCheck -check-prefix=TESTSEC %s
RUN: llvm-readobj --hex-dump=.test out2.dll | FileCheck -check-prefix=TESTSEC %s
RUN: llvm-readobj --hex-dump=.test out4.dll | FileCheck -check-prefix=TESTSEC %s
TESTSEC:      0x180008000 08500000 08300000 00200000 08100000
TESTSEC-NEXT: 0x180008010 00300000 00500000 10500000 10300000
TESTSEC-NEXT: 0x180008020 20500000 14100000

RUN: llvm-readobj --hex-dump=.test out3.dll | FileCheck -check-prefix=TESTSEC-X64 %s
TESTSEC-X64:      0x180008000 08300000 08300000 00200000 08100000
TESTSEC-X64-NEXT: 0x180008010 00300000 00500000 10300000 10300000
TESTSEC-X64-NEXT: 0x180008020 20300000

RUN: llvm-readobj --coff-load-config out.dll | FileCheck -check-prefix=LOADCONFIG %s
RUN: llvm-readobj --coff-load-config out2.dll | FileCheck -check-prefix=LOADCONFIG %s
RUN: llvm-readobj --coff-load-config out3.dll | FileCheck -check-prefix=LOADCONFIG %s
LOADCONFIG: AuxiliaryIAT: 0x5000
LOADCONFIG: AuxiliaryIATCopy: 0x42A0

RUN: llvm-readobj --hex-dump=.rdata out.dll | FileCheck -check-prefix=RDATA %s
RUN: llvm-readobj --hex-dump=.rdata out2.dll | FileCheck -check-prefix=RDATA %s
RUN: llvm-readobj --hex-dump=.rdata out3.dll | FileCheck -check-prefix=RDATA %s
RDATA:      0x1800042a0 00000000 00000000 14100080 01000000
RDATA-NEXT: 0x1800042b0 28100080 01000000 00000000 00000000
RDATA-NEXT: 0x1800042c0 3c100080 01000000 00000000 00000000
RDATA:      0x180005000 00000000 00000000 14100080 01000000
RDATA-NEXT: 0x180005010 28100080 01000000 00000000 00000000
RDATA-NEXT: 0x180005020 3c100080 01000000 00000000 00000000

RUN: llvm-readobj --coff-basereloc out.dll | FileCheck -check-prefix=BASERELOC %s
RUN: llvm-readobj --coff-basereloc out2.dll | FileCheck -check-prefix=BASERELOC %s
RUN: llvm-readobj --coff-basereloc out3.dll | FileCheck -check-prefix=BASERELOC %s
BASERELOC:      BaseReloc [
Aux IAT copy:
BASERELOC:          Address: 0x42A8
BASERELOC-NEXT:   }
BASERELOC-NEXT:   Entry {
BASERELOC-NEXT:     Type: DIR64
BASERELOC-NEXT:     Address: 0x42B0
BASERELOC-NEXT:   }
BASERELOC-NEXT:   Entry {
BASERELOC-NEXT:     Type: DIR64
BASERELOC-NEXT:     Address: 0x42C0
BASERELOC-NEXT:   }
Aux IAT:
BASERELOC-NOT:      Address: 0x5000
BASERELOC:          Address: 0x5008
BASERELOC-NEXT:   }
BASERELOC-NEXT:   Entry {
BASERELOC-NEXT:     Type: DIR64
BASERELOC-NEXT:     Address: 0x5010
BASERELOC-NEXT:   }
BASERELOC-NEXT:   Entry {
BASERELOC-NEXT:     Type: DIR64
BASERELOC-NEXT:     Address: 0x5020
BASERELOC-NEXT:   }

#--- test.s
    .section .test, "r"
    .globl arm64ec_data_sym
    .p2align 2, 0x0
arm64ec_data_sym:
    .rva __imp_myfunc
    .rva __imp_aux_myfunc
    .rva myfunc
    .rva "#myfunc"
    .rva __imp_mydata
    .rva __imp_aux_mydata
    .rva __imp_otherfunc
    .rva __imp_aux_otherfunc
    .rva __imp_myfunc2
    .rva __impchk_myfunc

#--- arm64ec-stubs.s
    .text
    .globl __icall_helper_arm64ec
    .p2align 2, 0x0
__icall_helper_arm64ec:
    mov w0, #2
    ret

    .section .cfg, "r"
    .globl __os_arm64x_dispatch_icall
    .p2align 2, 0x0
__os_arm64x_dispatch_icall:
    .xword 1

    .section .hybmp$x, "yi"
    .symidx __imp_myfunc
    .symidx myfunc_exit_thunk
    .word 4

    .section .wowthk$aa,"xr",discard,myfunc_exit_thunk
    .globl myfunc_exit_thunk
myfunc_exit_thunk:
    mov w0, #3
    ret

#--- arm64ec-stubs2.s
    .text
    .globl __icall_helper_arm64ec
    .p2align 2, 0x0
__icall_helper_arm64ec:
    mov w0, #2
    ret

    .section .cfg, "r"
    .globl __os_arm64x_dispatch_icall
    .p2align 2, 0x0
__os_arm64x_dispatch_icall:
    .xword 1

    .section .hybmp$x, "yi"
    .symidx myfunc
    .symidx myfunc_exit_thunk
    .word 4

    .section .wowthk$aa,"xr",discard,myfunc_exit_thunk
    .globl myfunc_exit_thunk
myfunc_exit_thunk:
    mov w0, #3
    ret

#--- arm64ec-stubs3.s
    .text
    .globl __icall_helper_arm64ec
    .p2align 2, 0x0
__icall_helper_arm64ec:
    mov w0, #2
    ret

    .section .cfg, "r"
    .globl __os_arm64x_dispatch_icall
    .p2align 2, 0x0
__os_arm64x_dispatch_icall:
    .xword 1

    .section .hybmp$x, "yi"
    .symidx __imp_aux_myfunc
    .symidx myfunc_exit_thunk
    .word 4

    .section .wowthk$aa,"xr",discard,myfunc_exit_thunk
    .globl myfunc_exit_thunk
myfunc_exit_thunk:
    mov w0, #3
    ret

#--- test.def
NAME test.dll
EXPORTS
    mydata DATA
    myfunc
    otherfunc

#--- test2.def
NAME test2.dll
EXPORTS
    myfunc2
