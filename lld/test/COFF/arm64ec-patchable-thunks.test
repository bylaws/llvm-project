REQUIRES: aarch64
RUN: split-file %s %t.dir && cd %t.dir

RUN: llvm-mc -filetype=obj -triple=arm64ec-windows arm64ec-patchable.s -o arm64ec-patchable.obj
RUN: llvm-mc -filetype=obj -triple=arm64ec-windows arm64ec-alias.s -o arm64ec-alias.obj
RUN: llvm-mc -filetype=obj -triple=arm64ec-windows %S/Inputs/loadconfig-arm64ec.s -o loadconfig-arm64ec.obj

RUN: lld-link -out:test.dll -machine:arm64ec arm64ec-patchable.obj loadconfig-arm64ec.obj \
RUN:          -dll -noentry -export:export_func

RUN: llvm-objdump -d test.dll | FileCheck -check-prefix=PATCH-DISASM %s
PATCH-DISASM:      Disassembly of section .text:
PATCH-DISASM-EMPTY:
PATCH-DISASM-NEXT: 0000000180001000 <.text>:
PATCH-DISASM-NEXT: 180001000: b0000000     adrp    x0, 0x180002000 <export_func>
PATCH-DISASM-NEXT: 180001004: 91004000     add     x0, x0, #0x10
PATCH-DISASM-NEXT: 180001008: d65f03c0     ret
PATCH-DISASM-NEXT: 18000100c: 52800040     mov     w0, #0x2                // =2
PATCH-DISASM-NEXT: 180001010: d65f03c0     ret
PATCH-DISASM-EMPTY:
PATCH-DISASM-NEXT: Disassembly of section .hexpthk:
PATCH-DISASM-EMPTY:
PATCH-DISASM-NEXT: 0000000180002000 <export_func>:
PATCH-DISASM-NEXT: 180002000: 48 8b c4                     movq    %rsp, %rax
PATCH-DISASM-NEXT: 180002003: 48 89 58 20                  movq    %rbx, 0x20(%rax)
PATCH-DISASM-NEXT: 180002007: 55                           pushq   %rbp
PATCH-DISASM-NEXT: 180002008: 5d                           popq    %rbp
PATCH-DISASM-NEXT: 180002009: e9 f2 ef ff ff               jmp     0x180001000 <.text>
PATCH-DISASM-NEXT: 18000200e: cc                           int3
PATCH-DISASM-NEXT: 18000200f: cc                           int3
PATCH-DISASM-NEXT: 180002010: 48 8b c4                     movq    %rsp, %rax
PATCH-DISASM-NEXT: 180002013: 48 89 58 20                  movq    %rbx, 0x20(%rax)
PATCH-DISASM-NEXT: 180002017: 55                           pushq   %rbp
PATCH-DISASM-NEXT: 180002018: 5d                           popq    %rbp
PATCH-DISASM-NEXT: 180002019: e9 ee ef ff ff               jmp     0x18000100c <.text+0xc>
PATCH-DISASM-NEXT: 18000201e: cc                           int3
PATCH-DISASM-NEXT: 18000201f: cc                           int3

RUN: llvm-objdump -p test.dll | FileCheck -check-prefix=PATCH-EXPORT %s
PATCH-EXPORT:      Ordinal      RVA  Name
PATCH-EXPORT-NEXT:       1   0x2000  export_func

RUN: llvm-readobj --coff-load-config test.dll | FileCheck -check-prefix=PATCH-CHPE %s
PATCH-CHPE:       CodeMap [
PATCH-CHPE-NEXT:    0x1000 - 0x1014  ARM64EC
PATCH-CHPE-NEXT:    0x2000 - 0x2020  X64
PATCH-CHPE-NEXT:  ]
PATCH-CHPE-NEXT:  CodeRangesToEntryPoints [
PATCH-CHPE-NEXT:    0x2000 - 0x2010 -> 0x2000
PATCH-CHPE-NEXT:    0x2010 - 0x2020 -> 0x2010
PATCH-CHPE-NEXT:  ]
PATCH-CHPE-NEXT:  RedirectionMetadata [
PATCH-CHPE-NEXT:    0x2000 -> 0x1000
PATCH-CHPE-NEXT:    0x2010 -> 0x100C
PATCH-CHPE-NEXT:  ]


RUN: lld-link -out:test.dll -machine:arm64ec arm64ec-alias.obj loadconfig-arm64ec.obj \
RUN:          -dll -noentry -export:export_func

RUN: llvm-objdump -d test.dll | FileCheck -check-prefix=PATCH-DISASM %s
RUN: llvm-objdump -p test.dll | FileCheck -check-prefix=PATCH-EXPORT %s
RUN: llvm-readobj --coff-load-config test.dll | FileCheck -check-prefix=PATCH-CHPE %s

#--- arm64ec-patchable.s
    .text
    .globl export_func
    .p2align 2, 0x0
export_func:
    adrp x0,"EXP+#patchable_func"
    add x0, x0, :lo12:"EXP+#patchable_func"
    ret

    .section ".text", "x", discard, "#patchable_func$hp_target"
    .globl "#patchable_func$hp_target"
    .p2align 2, 0x0
"#patchable_func$hp_target":
    mov w0, #2
    ret

#--- arm64ec-alias.s
    .text
    .globl export_func
    .p2align 2, 0x0
export_func:
    adrp x0,patchable_func
    add x0, x0, :lo12:patchable_func
    ret

    .section ".text", "x", discard, "#patchable_func$hp_target"
    .globl "#patchable_func$hp_target"
    .p2align 2, 0x0
"#patchable_func$hp_target":
    mov w0, #2
    ret

    .weak patchable_func
patchable_func = "EXP+#patchable_func"